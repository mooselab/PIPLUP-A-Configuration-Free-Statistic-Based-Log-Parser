from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri, r
from rpy2.robjects.conversion import localconverter
import pandas as pd
import numpy as np

# Import ScottKnottESD R package
sk = importr('ScottKnottESD')

# Summarized data
data = {
    "GA": {
        "Drain":    [0.692, 0.686, 1.000, 0.994, 0.761, 0.921, 0.752, 0.862, 0.793, 0.707, 0.919, 0.999, 0.888, 0.831],
        "XDrain":   [0.510, 0.943, 1.000, 0.993, 0.829, 0.871, 1.000, 0.690, 0.863, 0.780, 0.925, 0.999, 0.839, 0.766],
        "PreDrain":[0.989, 0.710, 0.976, 0.994, 0.848, 0.940, 0.316, 0.993, 0.793, 0.707, 0.927, 0.949, 0.889, 0.829],
        "PIPLUP":   [1.000, 0.866, 1.000, 0.970, 0.873, 0.905, 0.950, 0.996, 1.000, 0.884, 0.908, 1.000, 0.999, 0.796],
        "LILAC":    [0.000, 0.942, 1.000, 0.987, 0.707, 0.890, 1.000, 0.993, 0.870, 0.745, 0.833, 1.000, 0.999, 0.757],
        "LibreLog": [0.510, 0.967, 1.000, 1.000, 0.814, 0.964, 0.811, 0.992, 0.967, 0.868, 0.907, 1.000, 0.859, 0.874],
        "LogBatcher":[0.676, 0.946, 0.997, 0.990, 0.856, 0.923, 0.524, 0.998, 0.861, 0.726, 0.941, 1.000, 0.943, 0.750],
        "LUNAR":    [0.989, 0.831, 1.000, 0.993, 0.882, 0.941, 1.000, 1.000, 0.864, 0.780, 0.957, 1.000, 0.974, 0.867],
    },
    "PA": {
        "Drain":    [0.688, 0.112, 0.727, 0.844, 0.381, 0.541, 0.020, 0.312, 0.721, 0.586, 0.456, 0.569, 0.559, 0.219],
        "XDrain":   [0.688, 0.111, 0.371, 0.365, 0.206, 0.385, 0.189, 0.011, 0.098, 0.556, 0.455, 0.948, 0.280, 0.206],
        "PreDrain":[0.994, 0.118, 0.844, 0.824, 0.539, 0.812, 0.133, 0.656, 0.852, 0.649, 0.822, 0.720, 0.631, 0.456],
        "PIPLUP":   [0.994, 0.739, 0.863, 0.825, 0.585, 0.749, 0.427, 0.969, 0.993, 0.664, 0.945, 0.721, 0.909, 0.558],
        "LILAC":    [0.099, 0.729, 0.970, 0.375, 0.405, 0.711, 0.477, 0.542, 0.691, 0.347, 0.745, 0.909, 0.688, 0.491],
        "LibreLog": [0.897, 0.846, 0.993, 0.850, 0.651, 0.865, 0.831, 0.838, 0.846, 0.496, 0.929, 1.000, 0.889, 0.689],
        "LogBatcher":[0.676, 0.906, 0.990, 0.825, 0.520, 0.634, 0.447, 0.976, 0.985, 0.925, 0.881, 0.999, 0.715, 0.556],
        "LUNAR":    [1.000, 0.741, 0.998, 0.851, 0.605, 0.840, 0.952, 0.963, 0.990, 0.722, 0.968, 1.000, 0.996, 0.639],
    },
    "FGA": {
        "Drain":    [0.206, 0.778, 1.000, 0.904, 0.229, 0.785, 0.007, 0.010, 0.309, 0.872, 0.624, 0.935, 0.861, 0.237],
        "XDrain":   [0.600, 0.780, 1.000, 0.885, 0.782, 0.432, 1.000, 0.474, 0.558, 0.911, 0.641, 0.831, 0.743, 0.241],
        "PreDrain":[0.870, 0.857, 0.949, 0.904, 0.818, 0.947, 0.279, 0.946, 0.584, 0.883, 0.759, 0.901, 0.866, 0.844],
        "PIPLUP":   [1.000, 0.914, 1.000, 0.866, 0.864, 0.871, 0.946, 0.907, 0.960, 0.875, 0.828, 0.640, 0.886, 0.823],
        "LILAC":    [0.000, 0.819, 1.000, 0.867, 0.770, 0.921, 1.000, 0.971, 0.857, 0.727, 0.820, 0.658, 0.885, 0.322],
        "LibreLog": [0.500, 0.809, 1.000, 0.980, 0.824, 0.946, 0.667, 0.975, 0.838, 0.806, 0.808, 0.886, 0.865, 0.862],
        "LogBatcher":[0.727, 0.905, 0.921, 0.914, 0.863, 0.862, 0.957, 0.935, 0.901, 0.840, 0.817, 1.000, 0.788, 0.813],
        "LUNAR":    [0.870, 0.862, 1.000, 0.885, 0.869, 0.928, 1.000, 0.971, 0.828, 0.923, 0.885, 0.968, 0.880, 0.878],
    },
    "FTA": {
        "Drain":    [0.176, 0.262, 0.517, 0.627, 0.070, 0.394, 0.002, 0.004, 0.147, 0.487, 0.204, 0.478, 0.448, 0.072],
        "XDrain":   [0.500, 0.266, 0.448, 0.315, 0.137, 0.151, 0.375, 0.034, 0.084, 0.456, 0.206, 0.674, 0.253, 0.074],
        "PreDrain":[0.870, 0.492, 0.712, 0.723, 0.370, 0.598, 0.151, 0.597, 0.565, 0.857, 0.588, 0.418, 0.540, 0.472],
        "PIPLUP":   [0.909, 0.722, 0.724, 0.732, 0.533, 0.583, 0.731, 0.707, 0.920, 0.875, 0.714, 0.560, 0.531, 0.542],
        "LILAC":    [0.065, 0.447, 0.621, 0.578, 0.393, 0.640, 0.792, 0.711, 0.586, 0.364, 0.582, 0.493, 0.568, 0.177],
        "LibreLog": [0.583, 0.613, 0.759, 0.863, 0.498, 0.754, 0.624, 0.862, 0.662, 0.472, 0.722, 0.795, 0.712, 0.574],
        "LogBatcher":[0.727, 0.679, 0.698, 0.823, 0.491, 0.651, 0.681, 0.806, 0.861, 0.765, 0.689, 0.913, 0.593, 0.525],
        "LUNAR":    [0.957, 0.720, 0.862, 0.800, 0.551, 0.687, 0.875, 0.850, 0.817, 0.923, 0.807, 0.968, 0.656, 0.593],
    },
    "time": {
        "Drain":    [1.3, 1.1, 1.7, 2.4, 4.5, 5.5, 23.8, 5.1, 11.9, 20.6, 147.0, 361.9, 554.4, 1110.0],
        "XDrain":   [3.1, 3.1, 3.7, 9.6, 18.8, 30.7, 22.0, 23.5, 47.4, 19.8, 148.8, 426.6, 2497.5, 1207.4],
        "PreDrain": [1.1, 1.4, 2.1, 3.2, 6.8, 10.2, 14.1, 6.3, 11.4, 21.0, 151.8, 533.0, 747.5, 6846.3],
        "PIPLUP":   [1.2, 2.3, 2.2, 3.5, 9.7, 11.5, 13.8, 6.7, 11.8, 24.0, 149.2, 576.5, 902.33, 1445.3],
        "LILAC":    [12.7, 266.5, 28.6, 75.9, 1040.8, 60.8, 103.4, 213.6, 93.4, 78.2, 1060.9, 836.7, 1190.1, 2913.4],
        "LibreLog": [871.5, 216.0, 18.9, 52.2, 5935.8, 285.7, 377.6, 103.3, 539.8, 89.4, 1244.6, 1252.6, 1752.4, 8659.3],
        "LogBatcher":[17.6, 317.8, 24.3, 77.9, 1123.8, 267.6, 55.0, 133.2, 96.9, 45.0, 437.1, 99.1, 322.7, 2438.5],
        "LUNAR":    [26.8, 301.7, 34.5, 81.0, 17311.0, 334.9, 698.6, 153.0, 177.0, 129.8, 872.3, 1278.1, 2148.9, 25917.5],
    },
    "time w/o Thunderbird":{
        "Drain":    [1.3, 1.1, 1.7, 2.4, 4.5, 5.5, 23.8, 5.1, 11.9, 20.6, 147.0, 361.9, 554.4],
        "XDrain":   [3.1, 3.1, 3.7, 9.6, 18.8, 30.7, 22.0, 23.5, 47.4, 19.8, 148.8, 426.6, 2497.5],
        "PreDrain": [1.1, 1.4, 2.1, 3.2, 6.8, 10.2, 14.1, 6.3, 11.4, 21.0, 151.8, 533.0, 747.5],
        "PIPLUP":   [1.2, 2.3, 2.2, 3.5, 9.7, 11.5, 13.8, 6.7, 11.8, 24.0, 149.2, 576.5, 902.33],
        "LILAC":    [12.7, 266.5, 28.6, 75.9, 1040.8, 60.8, 103.4, 213.6, 93.4, 78.2, 1060.9, 836.7, 1190.1],
        "LibreLog": [871.5, 216.0, 18.9, 52.2, 5935.8, 285.7, 377.6, 103.3, 539.8, 89.4, 1244.6, 1252.6, 1752.4],
        "LogBatcher":[17.6, 317.8, 24.3, 77.9, 1123.8, 267.6, 55.0, 133.2, 96.9, 45.0, 437.1, 99.1, 322.7],
        "LUNAR":    [26.8, 301.7, 34.5, 81.0, 17311.0, 334.9, 698.6, 153.0, 177.0, 129.8, 872.3, 1278.1, 2148.9],
    }
}

std_list = {metric:{tool:round(np.std(data[metric][tool]), 3) for tool in ["Drain", "XDrain", "PreDrain", "LILAC", "LibreLog", "PIPLUP", "LogBatcher", "LUNAR"]} for metric in ['GA', 'PA', 'FGA', 'FTA']}
print(std_list)
result = {tool:[] for tool in ["Drain", "XDrain", "PreDrain", "PIPLUP", "LILAC", "LibreLog", "LogBatcher", "LUNAR"]}

for metric in ['GA', 'PA', 'FGA', 'FTA', 'time','time w/o Thunderbird']:# , 'time w/o Thunderbird'
    # Prepare the pandas DataFrame
    df = pd.DataFrame(data[metric])

    # Convert pandas DataFrame to R dataframe using context manager
    with localconverter(pandas2ri.converter):
        r_data = pandas2ri.py2rpy(df)

    # Run the Scott-Knott ESD analysis
    r_sk = sk.sk_esd(r_data)
    # Extract tool names and their ranks
    tools = np.array(r_sk[2], dtype=str)
    column_order = np.array(r_sk[3], dtype=int)-1
    ranks = list(r_sk[1])

    for c, r in zip(column_order, ranks):
        if metric not in ['time', 'time w/o Thunderbird']:
            result[tools[c]].append(r)
        else:
            # For time, we want to reverse the ranking (higher is worse)
            result[tools[c]].append(max(ranks)-r+1)

# Create ranking DataFrame
ranking = pd.DataFrame(
    result,
    index=["GA", "PA", "FGA", "FTA", "time", 'time w/o Thunderbird']
)

print(ranking)

